(import cstdio)
(import cstdlib)
(import macros)
(import concepts)
(import algorithms)
(import derivations)
(import map)
(import vector)
(import list)
(import unistd)
(import x11-xlib)
(import workspace)

(std.concepts.instantiate max int)
(std.concepts.instantiate Vector Workspace)
(std.concepts.instantiate Map uint int)

(using-namespace x11

(def string-to-keycode
  (fn intern uint ((ws (p Workspace)) (string (p (const char))))
    (keysym-to-keycode (get-display ws) (string-to-keysym string))))

(def event-key-is
  (fn intern bool ((ws (p Workspace))
                   (ev (p KeyEvent))
                   (string (p (const char))))
    (= (@:@ ev keycode) (string-to-keycode ws string))))

(def handle-keypress
  (fn intern void ((workspaces (p (Vector Workspace)))
                   (workspace-index (p int))
                   (ev-key (p KeyEvent))
                   (keycode-to-number  (p (Map uint int)))
                   (terminal-command  (p (const char))))
    (def ws (var auto \ ($ (@ workspaces) (@ workspace-index))))
    (def ev (var auto Event))
    (if (= (@:@ ev-key state) (| mod1-mask shift-mask))
        (if (event-key-is ws ev-key "Return")
            (do (system terminal-command) 0)
        (if (event-key-is ws ev-key "C")
            (do (destroy-window (get-display ws) (get-focus ws)) 0)
        (if (event-key-is ws ev-key "Tab")
            (do (focus-prev-window ws) 0)
            (let ((iter \ (find (@ keycode-to-number) (@:@ ev-key keycode))))
              (if (!= iter (end (@ keycode-to-number)))
                  (do (move-focus ws ($ (@ workspaces)
                                  (@:@ (source iter) second)))
                      0)
                  0)))))
    (if (= (@:@ ev-key state) mod1-mask)
        (if (event-key-is ws ev-key "Tab")
            (do (focus-next-window ws) 0)
        (if (event-key-is ws ev-key "Return")
            (do (set-principal-focus ws)
                (draw ws)
                (set-focus-principal ws) 0)
        (if (event-key-is ws ev-key "P")
            (do (setf (:@ ws mode) (Mode fullscreen))
                (set-principal-focus ws)
                (set-focus-principal ws)
                (draw ws) 0)
        (if (event-key-is ws ev-key "bracketleft")
            (do (setf (:@ ws mode) (Mode vertical))
                (set-principal-focus ws)
                (set-focus-principal ws)
                (draw ws) 0)
        (if (event-key-is ws ev-key "bracketright")
            (do (setf (:@ ws mode) (Mode horizontal))
                (set-principal-focus ws)
                (set-focus-principal ws)
                (draw ws) 0)
            (let ((iter \ (find (@ keycode-to-number) (@:@ ev-key keycode))))
              (if (!= iter (end (@ keycode-to-number)))
                  (let ((index \ (@:@ (source iter) second)))
                    (if (!= (@ workspace-index) index)
                        (do (unmap-workspace ws)
                            (setf workspace-index index)
                            (setv ws ($ (@ workspaces) (@ workspace-index)))
                            (map-workspace ws)
                            (draw ws)
                            (while (check-typed-event
                                     (@:@ ws dpy)
                                     map-notify (# ev))
                              true)
                            (set-focus-principal ws)
                            0)
                        0))
                  0)))))))
         0))
    (return)))

(def main (fn extern-c int ((argc int) (argv (p (p (const char)))))
  (let ((dpy (p Display))
        (root (Window))
        (attr WindowAttributes)
        (ev Event)
        (ev-key KeyEvent)
        (ev-map MapEvent)
        (ev-map-request MapRequestEvent)
        (ev-enter-window EnterWindowEvent)
        (ev-destroy-window DestroyWindowEvent)
        (ev-configure-request ConfigureRequestEvent)
        (workspace-index int 0)
        (env-display (p (const char)))
        (terminal-command-env (p (const char)))
        (terminal-command (array-of 256 char))
        (workspaces (Vector Workspace))
        (keycode-to-number (Map uint int)))

    (setv env-display (getenv "DISPLAY"))
    (setv dpy (open-display env-display))
    (and (null dpy)
      (do (fprintf stderr "Unable to open display!\n")
          (return 1)))

    (setv terminal-command-env (getenv "MAWLED_TERMINAL"))
    (sprintf terminal-command "%s &"
             (if (null terminal-command-env)
                 "xterm"
                 terminal-command-env))

    (setv root (default-root-window dpy))

    (let ((i \ 1))
      (for true (< i 10) (incv i)
        (let ((vec  (p (List (Window)))
                    (malloc' 1 (List (Window))))
              (wmap (p (Map (Window) (Window)))
                    (malloc' 1 (Map (Window) (Window))))
              (ws Workspace ((dpy dpy)
                             (root root)
                             (mode (Mode vertical))
                             (windows vec)
                             (tabmap wmap))))
          (init (@ vec))
          (init (@ wmap))
          (setf (: ws width)  0)
          (setf (: ws height) 0)
          (set-width-and-height (# ws))
          (push-back workspaces ws))))

    (init keycode-to-number)
    (let ((i \ 1)
          (buf (array-of 2 char)))
      (setf ($ buf 1) #\NULL)
      (for true (< i 10) (incv i)
        (setf ($ buf 0) (cast (+ (cast #\0 int) i) char))
        (insert keycode-to-number
                (string-to-keycode ($ workspaces 1) buf) (- i 1))))

    (mfor String ("Return" "C" "Tab"
                  "1" "2" "3" "4" "5" "6" "7" "8" "9")
      (grab-key dpy (keysym-to-keycode dpy (string-to-keysym String))
                (| mod1-mask shift-mask)
                root owner-events-true grab-mode-async grab-mode-async))

    (mfor String ("Return" "Tab" "P" "bracketleft" "bracketright"
                  "1" "2" "3" "4" "5" "6" "7" "8" "9")
      (grab-key dpy (keysym-to-keycode dpy (string-to-keysym String))
                mod1-mask
                root owner-events-true grab-mode-async grab-mode-async))

    (select-input dpy root (| structure-notify-mask
                           (| substructure-notify-mask
                           (| substructure-redirect-mask
                           (| enter-window-mask
                              leave-window-mask)))))

    (while true
      (def ws (var auto (p Workspace) ($ workspaces workspace-index)))
      (setv dpy (get-display ws))
      (next-event dpy (# ev))
      (mfor Event (ev-key ev-map ev-destroy-window ev-map-request
                   ev-enter-window ev-configure-request)
        (memcpy (cast (# Event) (p void))
                (cast (# ev) (p void))
                (sizeof Event)))
      (if (= (@: ev type) key-press)
          (do (handle-keypress (# workspaces) (# workspace-index)
                               (# ev-key) (# keycode-to-number)
                               terminal-command)
              0)
      (if (= (@: ev type) enter-notify)
          (do (set-focus ws (@: ev-enter-window window) (get-focus ws))
              0)
      (if (= (@: ev type) map-notify)
          (if (= (@: ev-map override-redirect) 0)
              (do (set-focus ws (@: ev-map window) (get-focus ws))
                  (select-input dpy (@: ev-map window)
                                (| enter-window-mask focus-change-mask))
                  0)
              0)
      (if (= (@: ev type) map-request)
          (if (not (has-window ws (@: ev-map-request window)))
              (do (add-window ws (@: ev-map-request window))
                  (draw ws)
                  (map-window dpy (get-principal ws))
                  0)
              0)
      (if (= (@: ev type) destroy-notify)
          (if (has-window ws (@: ev-destroy-window window))
              (do (remove-window ws (@: ev-destroy-window window))
                  (draw ws)
                  0)
              0)
      (if (= (@: ev type) configure-request)
          (if (= cw-stack-mode (& (@: ev-configure-request value-mask)
                                  cw-stack-mode))
              (do (def det (var auto \ (@: ev-configure-request detail)))
                  (if (= det above)
                      (do (raise-window dpy (@: ev-configure-request window))
                          0)
                  (if (= det below)
                      (do (lower-window dpy (@: ev-configure-request window))
                          0)
                      0))
                  0)
              0)
      (if (= (@: ev type) configure-notify)
          (do (let ((b \ (begin workspaces))
                    (e \ (end workspaces))
                    (changed bool false))
                (for true (!= b e) (setv b (successor b))
                  (and (set-width-and-height (source b))
                    (setv changed true)))
                (and changed
                  (do (draw ws) true))
                0))
          0))))))))))))
