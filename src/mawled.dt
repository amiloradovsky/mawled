(import cstdio)
(import cstdlib)
(import macros)
(import concepts)
(import algorithms)
(import derivations)
(import map)
(import vector)
(import list)
(import unistd)
(import x11-xlib)
(import workspace)

(std.concepts.instantiate max int)
(std.concepts.instantiate Vector Workspace)
(std.concepts.instantiate Map uint int)

(using-namespace x11

(def string-to-keycode
  (fn intern uint ((ws (p Workspace)) (string (p (const char))))
    (keysym-to-keycode (get-display ws) (string-to-keysym string))))

(def event-key-is
  (fn intern bool ((ws (p Workspace))
                   (ev (p KeyPressEvent))
                   (string (p (const char))))
    (= (@:@ ev keycode) (string-to-keycode ws string))))

(def handle-keypress
  (fn intern void ((workspaces (p (Vector Workspace)))
                   (workspace-index (p int))
                   (ev-key (p KeyPressEvent))
                   (keycode-to-number  (p (Map uint int)))
                   (terminal-command  (p (const char))))
    (def ws (var auto \ ($ (@ workspaces) (@ workspace-index))))
    (def ev (var auto Event))
    (cond ((= (@:@ ev-key state) (| Mod1Mask ShiftMask))
           (cond ((event-key-is ws ev-key "Return")
                  (system terminal-command))
                 ((event-key-is ws ev-key "C")
                  (close-window ws (get-focus ws)))
                 ((event-key-is ws ev-key "Tab")
                  (focus-prev-window ws))
                 (true
                  (let ((iter \ (find (@ keycode-to-number)
                                      (@:@ ev-key keycode))))
                    (and (!= iter (end (@ keycode-to-number)))
                      (move-focus ws ($ (@ workspaces)
                                        (@:@ (source iter) second))))))))
          ((= (@:@ ev-key state) Mod1Mask)
           (cond ((event-key-is ws ev-key "Tab")
                  (focus-next-window ws))
                 ((event-key-is ws ev-key "Return")
                  (do (set-principal-focus ws)
                      (draw ws)
                      (set-focus-principal ws)))
                 ((event-key-is ws ev-key "P")
                  (do (setf (:@ ws mode) (Fullscreen))
                      (set-principal-focus ws)
                      (set-focus-principal ws)
                      (draw ws)))
                 ((event-key-is ws ev-key "bracketleft")
                  (do (setf (:@ ws mode) (Vertical))
                      (set-principal-focus ws)
                      (set-focus-principal ws)
                      (draw ws)))
                 ((event-key-is ws ev-key "bracketright")
                  (do (setf (:@ ws mode) (Horizontal))
                      (set-principal-focus ws)
                      (set-focus-principal ws)
                      (draw ws)))
                 (true
                  (let ((iter \ (find (@ keycode-to-number)
                                      (@:@ ev-key keycode))))
                    (and (!= iter (end (@ keycode-to-number)))
                      (let ((index \ (@:@ (source iter) second)))
                        (and (!= (@ workspace-index) index)
                             (do (unmap-workspace ws)
                                 (setf workspace-index index)
                                 (setv ws ($ (@ workspaces) (@ workspace-index)))
                                 (map-workspace ws)
                                 (draw ws)
                                 (while (check-typed-event
                                          (@:@ ws dpy)
                                          map-notify (# ev))
                                   true)
                                 (set-focus ws
                                            (get-last-focussed ws)
                                            no-window)))))))))
          (true true))
    (return)))

(def error-handler (fn intern int ((display (p Display))
                                   (ev-error (p ErrorEvent)))
  (fprintf stderr "Error: serial %lu, ec %d, rc %d, mc %d, rid %lu\n"
                  (@:@ ev-error serial)
                  (@:@ ev-error error-code)
                  (@:@ ev-error request-code)
                  (@:@ ev-error minor-code)
                  (@:@ ev-error resourceid))
  (return 0)))

(def main (fn extern-c int ((argc int) (argv (p (p (const char)))))
  (let ((dpy (p Display))
        (root (Window))
        (attr WindowAttributes)
        (ev Event)
        (workspace-index int 0)
        (env-display (p (const char)))
        (terminal-command-env (p (const char)))
        (terminal-command (array-of 256 char))
        (workspaces (Vector Workspace))
        (keycode-to-number (Map uint int)))

    (setv env-display (getenv "DISPLAY"))
    (setv dpy (open-display env-display))
    (and (null dpy)
      (do (fprintf stderr "Unable to open display!\n")
          (return 1)))

    (setv terminal-command-env (getenv "MAWLED_TERMINAL"))
    (sprintf terminal-command "%s &"
             (if (null terminal-command-env)
                 "xterm"
                 terminal-command-env))

    (setv root (default-root-window dpy))
    (set-error-handler (# error-handler))

    (let ((i \ 1))
      (for true (< i 10) (incv i)
        (let ((vec  (p (List (Window)))
                    (malloc' 1 (List (Window))))
              (wmap (p (Map (Window) (Window)))
                    (malloc' 1 (Map (Window) (Window))))
              (ws Workspace ((dpy dpy)
                             (root root)
                             (mode (Vertical))
                             (windows vec)
                             (tabmap wmap)
                             (last-focussed no-window))))
          (init (@ vec))
          (init (@ wmap))
          (setf (: ws width)  0)
          (setf (: ws height) 0)
          (set-width-and-height (# ws))
          (push-back workspaces ws))))

    (init keycode-to-number)
    (let ((i \ 1)
          (buf (array-of 2 char)))
      (setf ($ buf 1) #\NULL)
      (for true (< i 10) (incv i)
        (setf ($ buf 0) (cast (+ (cast #\0 int) i) char))
        (insert keycode-to-number
                (string-to-keycode ($ workspaces 1) buf) (- i 1))))

    (mfor String ("Return" "C" "Tab"
                  "1" "2" "3" "4" "5" "6" "7" "8" "9")
      (grab-key dpy (keysym-to-keycode dpy (string-to-keysym String))
                (| Mod1Mask ShiftMask)
                root owner-events-true grab-mode-async grab-mode-async))

    (mfor String ("Return" "Tab" "P" "bracketleft" "bracketright"
                  "1" "2" "3" "4" "5" "6" "7" "8" "9")
      (grab-key dpy (keysym-to-keycode dpy (string-to-keysym String))
                Mod1Mask
                root owner-events-true grab-mode-async grab-mode-async))

    (select-input dpy root (| StructureNotifyMask
                           (| SubstructureNotifyMask
                           (| SubstructureRedirectMask
                           (| EnterWindowMask
                              LeaveWindowMask)))))

    (while true
      (def ws (var auto (p Workspace) ($ workspaces workspace-index)))
      (setv dpy (get-display ws))
      (next-event dpy (# ev))
      (case ev
        (KeyPressEvent
         (handle-keypress (# workspaces) (# workspace-index)
                          ev (# keycode-to-number)
                          terminal-command))
        (EnterWindowEvent
         (set-focus ws (@:@ ev window) (get-focus ws)))
        (MapNotifyEvent
         (and (= (@:@ ev override-redirect) 0)
           (do (set-focus ws (@:@ ev window) (get-focus ws))
               (select-input dpy (@:@ ev window)
                             (| EnterWindowMask FocusChangeMask)))))
        (MapRequestEvent
         (and (not (has-window ws (@:@ ev window)))
         (do (add-window ws (@:@ ev window))
             (draw ws)
             (map-window dpy (get-principal ws)))))
        (DestroyWindowEvent
         (and (has-window ws (@:@ ev window))
           (do (remove-window ws (@:@ ev window))
               (draw ws))))
        (ConfigureRequestEvent
         (and (= CWStackMode (& (@:@ ev value-mask)
                                CWStackMode))
           (do (def det (var auto \ (@:@ ev detail)))
               (and (= det Above)
                 (raise-window dpy (@:@ ev window)))
               (and (= det Below)
                 (lower-window dpy (@:@ ev window))))))
        (ConfigureNotifyEvent
         (let ((b \ (begin workspaces))
               (e \ (end workspaces))
               (changed bool false))
           (for true (!= b e) (setv b (successor b))
             (and (set-width-and-height (source b))
               (setv changed true)))
             (and changed
               (draw ws))))
        (true
         true)))))))
